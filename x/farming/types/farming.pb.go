// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/farming/v1beta1/farming.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PlanType enumerates the valid types of a plan.
type PlanType int32

const (
	// PLAN_TYPE_UNSPECIFIED defines the default plan type.
	PlanTypeNil PlanType = 0
	// PLAN_TYPE_PUBLIC defines the public plan type.
	PlanTypePublic PlanType = 1
	// PLAN_TYPE_PRIVATE defines the private plan type.
	PlanTypePrivate PlanType = 2
)

var PlanType_name = map[int32]string{
	0: "PLAN_TYPE_UNSPECIFIED",
	1: "PLAN_TYPE_PUBLIC",
	2: "PLAN_TYPE_PRIVATE",
}

var PlanType_value = map[string]int32{
	"PLAN_TYPE_UNSPECIFIED": 0,
	"PLAN_TYPE_PUBLIC":      1,
	"PLAN_TYPE_PRIVATE":     2,
}

func (x PlanType) String() string {
	return proto.EnumName(PlanType_name, int32(x))
}

func (PlanType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0abc81cc983fe36f, []int{0}
}

// Params defines the set of params for the farming module.
type Params struct {
	// private_plan_creation_fee specifies the fee for plan creation
	// this fee prevents from spamming and it is collected in the community pool
	PrivatePlanCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=private_plan_creation_fee,json=privatePlanCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"private_plan_creation_fee" yaml:"private_plan_creation_fee"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abc81cc983fe36f, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPrivatePlanCreationFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PrivatePlanCreationFee
	}
	return nil
}

// BasePlan defines a base plan type. It contains all the necessary fields
// for basic farming plan functionality. Any custom farming plan type should extend this
// type for additional functionality (e.g. fixed amount plan, ratio plan).
type BasePlan struct {
	// id specifies index of the farming plan
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// type specifies the plan type; type 0 is public and 1 is private
	// public plan must be created through governance proposal and private plan is created by account
	Type PlanType `protobuf:"varint,2,opt,name=type,proto3,enum=cosmos.farming.v1beta1.PlanType" json:"type,omitempty"`
	// farming_pool_address defines the bech32-encoded address of the farming pool
	FarmingPoolAddress string `protobuf:"bytes,3,opt,name=farming_pool_address,json=farmingPoolAddress,proto3" json:"farming_pool_address,omitempty" yaml:"farming_pool_address"`
	// reward_pool_address defines the bech32-encoded address that distributes reward amount of coins to farmers
	RewardPoolAddress string `protobuf:"bytes,4,opt,name=reward_pool_address,json=rewardPoolAddress,proto3" json:"reward_pool_address,omitempty" yaml:"reward_pool_address"`
	// termination_address defines the bech32-encoded address that terminates plan
	// when the plan ends after the end time, the balance of farming pool address is transferred to the termination
	// address
	TerminationAddress string `protobuf:"bytes,5,opt,name=termination_address,json=terminationAddress,proto3" json:"termination_address,omitempty" yaml:"termination_address"`
	// staking_reserve_address defines the bech32-encoded address that stores staking reserves
	StakingReserveAddress string `protobuf:"bytes,6,opt,name=staking_reserve_address,json=stakingReserveAddress,proto3" json:"staking_reserve_address,omitempty" yaml:"staking_reserve_address"`
	// staking_coin_weights specifies coin weights for the plan
	StakingCoinWeights github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,7,rep,name=staking_coin_weights,json=stakingCoinWeights,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"staking_coin_weights" yaml:"staking_coin_weights"`
	// start_time specifies the start time of the plan
	StartTime time.Time `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time" yaml:"start_time"`
	// end_time specifies the end time of the plan
	EndTime time.Time `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	// epoch_days specifies a period of time that triggers the distribution plan; it is measured in days
	EpochDays uint32 `protobuf:"varint,10,opt,name=epoch_days,json=epochDays,proto3" json:"epoch_days,omitempty" yaml:"epoch_days"`
}

func (m *BasePlan) Reset()      { *m = BasePlan{} }
func (*BasePlan) ProtoMessage() {}
func (*BasePlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abc81cc983fe36f, []int{1}
}
func (m *BasePlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasePlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasePlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasePlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasePlan.Merge(m, src)
}
func (m *BasePlan) XXX_Size() int {
	return m.Size()
}
func (m *BasePlan) XXX_DiscardUnknown() {
	xxx_messageInfo_BasePlan.DiscardUnknown(m)
}

var xxx_messageInfo_BasePlan proto.InternalMessageInfo

// FixedAmountPlan defines a fixed amount plan that fixed amount of coins are distributed for every epoch.
type FixedAmountPlan struct {
	*BasePlan `protobuf:"bytes,1,opt,name=base_plan,json=basePlan,proto3,embedded=base_plan" json:"base_plan,omitempty" yaml:"base_plan"`
	// epoch_amount specifies the distributing amount for each epoch
	EpochAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=epoch_amount,json=epochAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"epoch_amount" yaml:"epoch_amount"`
}

func (m *FixedAmountPlan) Reset()      { *m = FixedAmountPlan{} }
func (*FixedAmountPlan) ProtoMessage() {}
func (*FixedAmountPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abc81cc983fe36f, []int{2}
}
func (m *FixedAmountPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedAmountPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixedAmountPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixedAmountPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedAmountPlan.Merge(m, src)
}
func (m *FixedAmountPlan) XXX_Size() int {
	return m.Size()
}
func (m *FixedAmountPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedAmountPlan.DiscardUnknown(m)
}

var xxx_messageInfo_FixedAmountPlan proto.InternalMessageInfo

// RatioPlan defines a ratio plan that ratio of total coins in farming pool address is distributed for every epoch.
type RatioPlan struct {
	*BasePlan `protobuf:"bytes,1,opt,name=base_plan,json=basePlan,proto3,embedded=base_plan" json:"base_plan,omitempty" yaml:"base_plan"`
	// epoch_ratio specifies the distributing amount by ratio
	EpochRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=epoch_ratio,json=epochRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"epoch_ratio" yaml:"epoch_ratio"`
}

func (m *RatioPlan) Reset()      { *m = RatioPlan{} }
func (*RatioPlan) ProtoMessage() {}
func (*RatioPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abc81cc983fe36f, []int{3}
}
func (m *RatioPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RatioPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RatioPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RatioPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatioPlan.Merge(m, src)
}
func (m *RatioPlan) XXX_Size() int {
	return m.Size()
}
func (m *RatioPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_RatioPlan.DiscardUnknown(m)
}

var xxx_messageInfo_RatioPlan proto.InternalMessageInfo

// Staking defines a farmer's staking information.
type Staking struct {
	// plan_id specifies index of the target farming plan
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty" yaml:"plan_id"`
	// farmer defines the bech32-encoded address of the staker for the plan
	Farmer string `protobuf:"bytes,2,opt,name=farmer,proto3" json:"farmer,omitempty"`
	// staked_coins specifies the staking amount for the plan of farmer
	StakedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=staked_coins,json=stakedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"staked_coins" yaml:"staked_coins"`
	// queued_coins specifies the coins on standby before current epoch passes and gets staked.
	QueuedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=queued_coins,json=queuedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"queued_coins" yaml:"queued_coins"`
}

func (m *Staking) Reset()      { *m = Staking{} }
func (*Staking) ProtoMessage() {}
func (*Staking) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abc81cc983fe36f, []int{4}
}
func (m *Staking) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Staking) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Staking.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Staking) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Staking.Merge(m, src)
}
func (m *Staking) XXX_Size() int {
	return m.Size()
}
func (m *Staking) XXX_DiscardUnknown() {
	xxx_messageInfo_Staking.DiscardUnknown(m)
}

var xxx_messageInfo_Staking proto.InternalMessageInfo

// Reward defines a record of farming rewards.
type Reward struct {
	// plan_id specifies index of the target farming plan
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty" yaml:"plan_id"`
	// farmer defines the bech32-encoded address of the staker for the plan
	Farmer string `protobuf:"bytes,2,opt,name=farmer,proto3" json:"farmer,omitempty"`
	// reward_coins specifies rewards amount at this point in time when farmers receive them from the farming plan
	RewardCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=reward_coins,json=rewardCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward_coins" yaml:"reward_coins"`
}

func (m *Reward) Reset()      { *m = Reward{} }
func (*Reward) ProtoMessage() {}
func (*Reward) Descriptor() ([]byte, []int) {
	return fileDescriptor_0abc81cc983fe36f, []int{5}
}
func (m *Reward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reward.Merge(m, src)
}
func (m *Reward) XXX_Size() int {
	return m.Size()
}
func (m *Reward) XXX_DiscardUnknown() {
	xxx_messageInfo_Reward.DiscardUnknown(m)
}

var xxx_messageInfo_Reward proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cosmos.farming.v1beta1.PlanType", PlanType_name, PlanType_value)
	proto.RegisterType((*Params)(nil), "cosmos.farming.v1beta1.Params")
	proto.RegisterType((*BasePlan)(nil), "cosmos.farming.v1beta1.BasePlan")
	proto.RegisterType((*FixedAmountPlan)(nil), "cosmos.farming.v1beta1.FixedAmountPlan")
	proto.RegisterType((*RatioPlan)(nil), "cosmos.farming.v1beta1.RatioPlan")
	proto.RegisterType((*Staking)(nil), "cosmos.farming.v1beta1.Staking")
	proto.RegisterType((*Reward)(nil), "cosmos.farming.v1beta1.Reward")
}

func init() {
	proto.RegisterFile("cosmos/farming/v1beta1/farming.proto", fileDescriptor_0abc81cc983fe36f)
}

var fileDescriptor_0abc81cc983fe36f = []byte{
	// 996 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xb8, 0xae, 0x63, 0x8f, 0x21, 0x71, 0x26, 0x4d, 0x70, 0x1c, 0xd8, 0x5d, 0xad, 0x10,
	0xb2, 0x52, 0xba, 0x56, 0x43, 0x4f, 0xb9, 0x65, 0xf3, 0x81, 0x2c, 0x55, 0xc1, 0x4c, 0x5d, 0x0a,
	0xbd, 0xac, 0xc6, 0xde, 0x89, 0xb3, 0xaa, 0xbd, 0x6b, 0x76, 0xd6, 0x69, 0xfd, 0x07, 0x20, 0x55,
	0x39, 0x55, 0x9c, 0xb8, 0x44, 0xaa, 0xe0, 0xd6, 0x33, 0x37, 0xf8, 0x03, 0x7a, 0x8c, 0x90, 0x90,
	0x10, 0x87, 0x0d, 0x4a, 0x2e, 0x9c, 0x7d, 0xe6, 0x80, 0xe6, 0x63, 0x9d, 0x6d, 0xe5, 0xd0, 0x1a,
	0xc1, 0xc9, 0x9e, 0x79, 0xbf, 0xf7, 0x7b, 0x1f, 0xf3, 0x7e, 0xcf, 0x86, 0x1f, 0x76, 0x02, 0xd6,
	0x0f, 0x58, 0xfd, 0x80, 0x84, 0x7d, 0xcf, 0xef, 0xd6, 0x8f, 0x6e, 0xb7, 0x69, 0x44, 0x6e, 0x27,
	0x67, 0x6b, 0x10, 0x06, 0x51, 0x80, 0x56, 0x24, 0xca, 0x4a, 0x6e, 0x15, 0xaa, 0x7a, 0xa3, 0x1b,
	0x74, 0x03, 0x01, 0xa9, 0xf3, 0x6f, 0x12, 0x5d, 0x5d, 0x95, 0x68, 0x47, 0x1a, 0x94, 0xab, 0x34,
	0x69, 0x2a, 0x5c, 0x9b, 0x30, 0x3a, 0x89, 0xd5, 0x09, 0x3c, 0x5f, 0xd9, 0xf5, 0x6e, 0x10, 0x74,
	0x7b, 0xb4, 0x2e, 0x4e, 0xed, 0xe1, 0x41, 0x3d, 0xf2, 0xfa, 0x94, 0x45, 0xa4, 0x3f, 0x90, 0x00,
	0xf3, 0x27, 0x00, 0xf3, 0x4d, 0x12, 0x92, 0x3e, 0x43, 0x2f, 0x00, 0x5c, 0x1d, 0x84, 0xde, 0x11,
	0x89, 0xa8, 0x33, 0xe8, 0x11, 0xdf, 0xe9, 0x84, 0x94, 0x44, 0x5e, 0xe0, 0x3b, 0x07, 0x94, 0x56,
	0x80, 0x71, 0xad, 0x56, 0xda, 0x58, 0xb5, 0x54, 0x78, 0x1e, 0x30, 0x49, 0xdb, 0xda, 0x0e, 0x3c,
	0xdf, 0x6e, 0xbd, 0x8c, 0xf5, 0xcc, 0x38, 0xd6, 0x8d, 0x11, 0xe9, 0xf7, 0x36, 0xcd, 0x2b, 0x99,
	0xcc, 0x17, 0x67, 0x7a, 0xad, 0xeb, 0x45, 0x87, 0xc3, 0xb6, 0xd5, 0x09, 0xfa, 0xaa, 0x1e, 0xf5,
	0x71, 0x8b, 0xb9, 0x8f, 0xea, 0xd1, 0x68, 0x40, 0x99, 0x20, 0x65, 0x78, 0x45, 0xf1, 0x34, 0x7b,
	0xc4, 0xdf, 0x56, 0x2c, 0x7b, 0x94, 0x6e, 0xe6, 0xbe, 0x7b, 0xae, 0x67, 0xcc, 0x9f, 0xf3, 0xb0,
	0x60, 0x13, 0x26, 0xac, 0x68, 0x1e, 0x66, 0x3d, 0xb7, 0x02, 0x0c, 0x50, 0xcb, 0xe1, 0xac, 0xe7,
	0xa2, 0x3b, 0x30, 0xc7, 0x99, 0x2a, 0x59, 0x03, 0xd4, 0xe6, 0x37, 0x0c, 0x6b, 0x7a, 0xcf, 0x2d,
	0xee, 0xdb, 0x1a, 0x0d, 0x28, 0x16, 0x68, 0xf4, 0x39, 0xbc, 0xa1, 0x10, 0xce, 0x20, 0x08, 0x7a,
	0x0e, 0x71, 0xdd, 0x90, 0x32, 0x56, 0xb9, 0x66, 0x80, 0x5a, 0xd1, 0xd6, 0xc7, 0xb1, 0xbe, 0x26,
	0x0b, 0x9c, 0x86, 0x32, 0x31, 0x52, 0xd7, 0xcd, 0x20, 0xe8, 0x6d, 0xc9, 0x4b, 0xb4, 0x0f, 0x97,
	0x42, 0xfa, 0x98, 0x84, 0xee, 0xab, 0x8c, 0x39, 0xc1, 0xa8, 0x8d, 0x63, 0xbd, 0x2a, 0x19, 0xa7,
	0x80, 0x4c, 0xbc, 0x28, 0x6f, 0xd3, 0x7c, 0x9f, 0xc1, 0xa5, 0x88, 0xf2, 0x28, 0xb2, 0xa7, 0x09,
	0xdf, 0xf5, 0xd7, 0xf9, 0xa6, 0x80, 0x4c, 0x8c, 0x52, 0xb7, 0x09, 0xe1, 0x43, 0xf8, 0x1e, 0x8b,
	0xc8, 0x23, 0x5e, 0x4d, 0x48, 0x19, 0x0d, 0x8f, 0xe8, 0x84, 0x34, 0x2f, 0x48, 0xcd, 0x71, 0xac,
	0x6b, 0x92, 0xf4, 0x0a, 0xa0, 0x89, 0x97, 0x95, 0x05, 0x4b, 0x43, 0xc2, 0xfd, 0x3d, 0x80, 0x37,
	0x12, 0x1f, 0x3e, 0x98, 0xce, 0x63, 0xea, 0x75, 0x0f, 0x23, 0x56, 0x99, 0x13, 0x03, 0xf5, 0xfe,
	0xd4, 0x81, 0xda, 0xa1, 0x1d, 0x31, 0x53, 0x58, 0xcd, 0xd4, 0xda, 0xab, 0xb1, 0xd3, 0x3c, 0x7c,
	0x9c, 0x6e, 0xbe, 0xc5, 0x38, 0x29, 0x4a, 0x86, 0x91, 0x62, 0xe1, 0xa7, 0x07, 0x92, 0x03, 0x7d,
	0x09, 0x21, 0x8b, 0x48, 0x18, 0x39, 0x5c, 0x1e, 0x95, 0x82, 0x01, 0x6a, 0xa5, 0x8d, 0xaa, 0x25,
	0xb5, 0x63, 0x25, 0xda, 0xb1, 0x5a, 0x89, 0x76, 0xec, 0x0f, 0x54, 0x5e, 0x8b, 0x93, 0xbc, 0x94,
	0xaf, 0xf9, 0xec, 0x4c, 0x07, 0xb8, 0x28, 0x2e, 0x38, 0x1c, 0x61, 0x58, 0xa0, 0xbe, 0x2b, 0x79,
	0x8b, 0x6f, 0xe4, 0x5d, 0x53, 0xbc, 0x0b, 0x92, 0x37, 0xf1, 0x94, 0xac, 0x73, 0xd4, 0x77, 0x05,
	0xe7, 0x1d, 0x08, 0xe9, 0x20, 0xe8, 0x1c, 0x3a, 0x2e, 0x19, 0xb1, 0x0a, 0x34, 0x40, 0xed, 0x5d,
	0x7b, 0xf9, 0x32, 0x9b, 0x4b, 0x9b, 0x89, 0x8b, 0xe2, 0xb0, 0x43, 0x46, 0x6c, 0x73, 0xf1, 0xe9,
	0x73, 0x3d, 0xc3, 0x55, 0xf3, 0xcb, 0x8f, 0xb7, 0xae, 0xf3, 0xa1, 0x6f, 0x98, 0x7f, 0x01, 0xb8,
	0xb0, 0xe7, 0x3d, 0xa1, 0xee, 0x56, 0x3f, 0x18, 0xfa, 0x91, 0x50, 0xd1, 0x03, 0x58, 0xe4, 0x4f,
	0x21, 0x74, 0x2b, 0xc4, 0x54, 0xba, 0x5a, 0x3a, 0x89, 0xf4, 0xec, 0xca, 0x69, 0xac, 0x83, 0x71,
	0xac, 0x97, 0x65, 0x06, 0x13, 0x02, 0x13, 0x17, 0xda, 0x89, 0x3c, 0xbf, 0x01, 0xf0, 0x1d, 0x99,
	0x1a, 0x11, 0xd1, 0x2a, 0xd9, 0x37, 0x6d, 0x94, 0x4f, 0x55, 0x37, 0x96, 0xd2, 0x75, 0x49, 0xe7,
	0xd9, 0x96, 0x48, 0x49, 0xb8, 0xca, 0x22, 0x37, 0x0b, 0x49, 0x1f, 0xcc, 0x5f, 0x01, 0x2c, 0x62,
	0x2e, 0x84, 0xff, 0xb7, 0x70, 0x0a, 0x65, 0x7c, 0x27, 0xe4, 0xb1, 0xc4, 0x3a, 0x2a, 0xda, 0x3b,
	0xbc, 0xb6, 0xdf, 0x63, 0xfd, 0xa3, 0xb7, 0x1b, 0xdd, 0x71, 0xac, 0xa3, 0x74, 0x17, 0x04, 0x95,
	0x89, 0xe5, 0x1c, 0x88, 0x1a, 0x52, 0x75, 0xfd, 0x99, 0x85, 0x73, 0xf7, 0xe4, 0x90, 0xa3, 0x9b,
	0x70, 0x4e, 0x6c, 0xe0, 0x64, 0x33, 0xda, 0x68, 0x1c, 0xeb, 0xf3, 0x6a, 0x45, 0x4b, 0x83, 0x89,
	0xf3, 0xfc, 0x5b, 0xc3, 0x45, 0x2b, 0x30, 0xcf, 0x2b, 0xa5, 0xa1, 0x4c, 0x12, 0xab, 0x93, 0x78,
	0x3a, 0xae, 0x1a, 0xea, 0x0a, 0xe9, 0xf1, 0x65, 0x38, 0xdb, 0xd3, 0xa5, 0x9d, 0x67, 0x7c, 0x3a,
	0xe9, 0x2a, 0x0e, 0x22, 0x8f, 0xaf, 0x87, 0x74, 0x38, 0xc9, 0x23, 0x37, 0x63, 0x1e, 0x69, 0xe7,
	0x19, 0xf3, 0x90, 0xae, 0xe2, 0x90, 0x6a, 0xf5, 0x19, 0x80, 0x79, 0x2c, 0x16, 0xf4, 0x7f, 0xd7,
	0x69, 0xf5, 0x33, 0xf0, 0xef, 0x3a, 0x9d, 0x76, 0x9e, 0xb1, 0x42, 0xe9, 0xfa, 0x5a, 0x85, 0xeb,
	0xdf, 0x02, 0x58, 0x48, 0x7e, 0x22, 0xd1, 0x3a, 0x5c, 0x6e, 0xde, 0xdd, 0xda, 0x77, 0x5a, 0x5f,
	0x35, 0x77, 0x9d, 0xfb, 0xfb, 0xf7, 0x9a, 0xbb, 0xdb, 0x8d, 0xbd, 0xc6, 0xee, 0x4e, 0x39, 0x53,
	0x5d, 0x38, 0x3e, 0x31, 0x4a, 0x09, 0x70, 0xdf, 0xeb, 0xa1, 0x1a, 0x2c, 0x5f, 0x62, 0x9b, 0xf7,
	0xed, 0xbb, 0x8d, 0xed, 0x32, 0xa8, 0xa2, 0xe3, 0x13, 0x63, 0x3e, 0x81, 0x35, 0x87, 0xed, 0x9e,
	0xd7, 0x41, 0xeb, 0x70, 0x31, 0x85, 0xc4, 0x8d, 0x2f, 0xb6, 0x5a, 0xbb, 0xe5, 0x6c, 0x75, 0xe9,
	0xf8, 0xc4, 0x58, 0x98, 0x40, 0xe5, 0xdf, 0x80, 0x6a, 0xee, 0xe9, 0x0f, 0x5a, 0xc6, 0xde, 0x7b,
	0x79, 0xae, 0x81, 0xd3, 0x73, 0x0d, 0xfc, 0x71, 0xae, 0x81, 0x67, 0x17, 0x5a, 0xe6, 0xf4, 0x42,
	0xcb, 0xfc, 0x76, 0xa1, 0x65, 0x1e, 0x7e, 0xfc, 0x8f, 0xf5, 0x3e, 0x99, 0xfc, 0x2f, 0x13, 0x95,
	0xb7, 0xf3, 0x62, 0x07, 0x7f, 0xf2, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x20, 0xd0, 0xe6, 0xf6,
	0xb6, 0x09, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrivatePlanCreationFee) > 0 {
		for iNdEx := len(m.PrivatePlanCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PrivatePlanCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BasePlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasePlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasePlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochDays != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.EpochDays))
		i--
		dAtA[i] = 0x50
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintFarming(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x4a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintFarming(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	if len(m.StakingCoinWeights) > 0 {
		for iNdEx := len(m.StakingCoinWeights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakingCoinWeights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.StakingReserveAddress) > 0 {
		i -= len(m.StakingReserveAddress)
		copy(dAtA[i:], m.StakingReserveAddress)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.StakingReserveAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TerminationAddress) > 0 {
		i -= len(m.TerminationAddress)
		copy(dAtA[i:], m.TerminationAddress)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.TerminationAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RewardPoolAddress) > 0 {
		i -= len(m.RewardPoolAddress)
		copy(dAtA[i:], m.RewardPoolAddress)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.RewardPoolAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FarmingPoolAddress) > 0 {
		i -= len(m.FarmingPoolAddress)
		copy(dAtA[i:], m.FarmingPoolAddress)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.FarmingPoolAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FixedAmountPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedAmountPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedAmountPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochAmount) > 0 {
		for iNdEx := len(m.EpochAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EpochAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BasePlan != nil {
		{
			size, err := m.BasePlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFarming(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RatioPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RatioPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RatioPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EpochRatio.Size()
		i -= size
		if _, err := m.EpochRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFarming(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.BasePlan != nil {
		{
			size, err := m.BasePlan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFarming(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Staking) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Staking) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Staking) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueuedCoins) > 0 {
		for iNdEx := len(m.QueuedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueuedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.StakedCoins) > 0 {
		for iNdEx := len(m.StakedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlanId != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Reward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardCoins) > 0 {
		for iNdEx := len(m.RewardCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFarming(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Farmer) > 0 {
		i -= len(m.Farmer)
		copy(dAtA[i:], m.Farmer)
		i = encodeVarintFarming(dAtA, i, uint64(len(m.Farmer)))
		i--
		dAtA[i] = 0x12
	}
	if m.PlanId != 0 {
		i = encodeVarintFarming(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFarming(dAtA []byte, offset int, v uint64) int {
	offset -= sovFarming(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PrivatePlanCreationFee) > 0 {
		for _, e := range m.PrivatePlanCreationFee {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	return n
}

func (m *BasePlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFarming(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovFarming(uint64(m.Type))
	}
	l = len(m.FarmingPoolAddress)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	l = len(m.RewardPoolAddress)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	l = len(m.TerminationAddress)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	l = len(m.StakingReserveAddress)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	if len(m.StakingCoinWeights) > 0 {
		for _, e := range m.StakingCoinWeights {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovFarming(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovFarming(uint64(l))
	if m.EpochDays != 0 {
		n += 1 + sovFarming(uint64(m.EpochDays))
	}
	return n
}

func (m *FixedAmountPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasePlan != nil {
		l = m.BasePlan.Size()
		n += 1 + l + sovFarming(uint64(l))
	}
	if len(m.EpochAmount) > 0 {
		for _, e := range m.EpochAmount {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	return n
}

func (m *RatioPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasePlan != nil {
		l = m.BasePlan.Size()
		n += 1 + l + sovFarming(uint64(l))
	}
	l = m.EpochRatio.Size()
	n += 1 + l + sovFarming(uint64(l))
	return n
}

func (m *Staking) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanId != 0 {
		n += 1 + sovFarming(uint64(m.PlanId))
	}
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	if len(m.StakedCoins) > 0 {
		for _, e := range m.StakedCoins {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	if len(m.QueuedCoins) > 0 {
		for _, e := range m.QueuedCoins {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	return n
}

func (m *Reward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanId != 0 {
		n += 1 + sovFarming(uint64(m.PlanId))
	}
	l = len(m.Farmer)
	if l > 0 {
		n += 1 + l + sovFarming(uint64(l))
	}
	if len(m.RewardCoins) > 0 {
		for _, e := range m.RewardCoins {
			l = e.Size()
			n += 1 + l + sovFarming(uint64(l))
		}
	}
	return n
}

func sovFarming(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFarming(x uint64) (n int) {
	return sovFarming(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivatePlanCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivatePlanCreationFee = append(m.PrivatePlanCreationFee, types.Coin{})
			if err := m.PrivatePlanCreationFee[len(m.PrivatePlanCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasePlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasePlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasePlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PlanType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmingPoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FarmingPoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingCoinWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingCoinWeights = append(m.StakingCoinWeights, types.DecCoin{})
			if err := m.StakingCoinWeights[len(m.StakingCoinWeights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochDays", wireType)
			}
			m.EpochDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochDays |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedAmountPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedAmountPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedAmountPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasePlan == nil {
				m.BasePlan = &BasePlan{}
			}
			if err := m.BasePlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochAmount = append(m.EpochAmount, types.Coin{})
			if err := m.EpochAmount[len(m.EpochAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RatioPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RatioPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RatioPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasePlan == nil {
				m.BasePlan = &BasePlan{}
			}
			if err := m.BasePlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EpochRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Staking) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Staking: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Staking: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakedCoins = append(m.StakedCoins, types.Coin{})
			if err := m.StakedCoins[len(m.StakedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueuedCoins = append(m.QueuedCoins, types.Coin{})
			if err := m.QueuedCoins[len(m.QueuedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Farmer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Farmer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFarming
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFarming
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardCoins = append(m.RewardCoins, types.Coin{})
			if err := m.RewardCoins[len(m.RewardCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFarming(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFarming
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFarming(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFarming
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFarming
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFarming
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFarming
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFarming
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFarming        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFarming          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFarming = fmt.Errorf("proto: unexpected end of group")
)
